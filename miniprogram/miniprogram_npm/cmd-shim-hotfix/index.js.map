{"version":3,"sources":["index.js","lib\\to-batch-syntax.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["// On windows, create a .cmd file.\n// Read the #! in the file to see what it uses.  The vast majority\n// of the time, this will be either:\n// \"#!/usr/bin/env <prog> <args...>\"\n// or:\n// \"#!<prog> <args...>\"\n//\n// Write a binroot/pkg.bin + \".cmd\" file that has this line in it:\n// @<prog> <args...> %dp0%<target> %*\n\nmodule.exports = cmdShim\ncmdShim.ifExists = cmdShimIfExists\n\nvar fs = require(\"graceful-fs\")\n\nvar mkdir = require(\"mkdirp\")\n  , path = require(\"path\")\n  , toBatchSyntax = require(\"./lib/to-batch-syntax\")\n  , shebangExpr = /^#\\!\\s*(?:\\/usr\\/bin\\/env)?\\s*([^ \\t]+=[^ \\t]+\\s+)*\\s*([^ \\t]+)(.*)$/\n\nfunction cmdShimIfExists (from, to, cb) {\n  fs.stat(from, function (er) {\n    if (er) return cb()\n    cmdShim(from, to, cb)\n  })\n}\n\n// Try to unlink, but ignore errors.\n// Any problems will surface later.\nfunction rm (path, cb) {\n  fs.unlink(path, function(er) {\n    cb()\n  })\n}\n\nfunction cmdShim (from, to, cb) {\n  fs.stat(from, function (er, stat) {\n    if (er)\n      return cb(er)\n\n    cmdShim_(from, to, cb)\n  })\n}\n\nfunction cmdShim_ (from, to, cb) {\n  var then = times(3, next, cb)\n  rm(to, then)\n  rm(to + \".cmd\", then)\n  rm(to + \".ps1\", then)\n\n  function next(er) {\n    writeShim(from, to, cb)\n  }\n}\n\nfunction writeShim (from, to, cb) {\n  // make a cmd file and a sh script\n  // First, check if the bin is a #! of some sort.\n  // If not, then assume it's something that'll be compiled, or some other\n  // sort of script, and just call it directly.\n  mkdir(path.dirname(to), function (er) {\n    if (er)\n      return cb(er)\n    fs.readFile(from, \"utf8\", function (er, data) {\n      if (er) return writeShim_(from, to, null, null, null, cb)\n      var firstLine = data.trim().split(/\\r*\\n/)[0]\n        , shebang = firstLine.match(shebangExpr)\n      if (!shebang) return writeShim_(from, to, null, null, null, cb)\n      var vars = shebang[1] || \"\"\n        , prog = shebang[2]\n        , args = shebang[3] || \"\"\n      return writeShim_(from, to, prog, args, vars, cb)\n    })\n  })\n}\n\n\nfunction writeShim_ (from, to, prog, args, variables, cb) {\n  var shTarget = path.relative(path.dirname(to), from)\n    , target = shTarget.split(\"/\").join(\"\\\\\")\n    , longProg\n    , shProg = prog && prog.split(\"\\\\\").join(\"/\")\n    , shLongProg\n    , pwshProg = shProg && \"\\\"\" + shProg + \"$exe\\\"\"\n    , pwshLongProg\n  shTarget = shTarget.split(\"\\\\\").join(\"/\")\n  args = args || \"\"\n  variables = variables || \"\"\n  if (!prog) {\n    prog = \"\\\"%dp0%\\\\\" + target + \"\\\"\"\n    shProg = \"\\\"$basedir/\" + shTarget + \"\\\"\"\n    pwshProg = shProg\n    args = \"\"\n    target = \"\"\n    shTarget = \"\"\n  } else {\n    longProg = \"\\\"%dp0%\\\\\" + prog + \".exe\\\"\"\n    shLongProg = \"\\\"$basedir/\" + prog + \"\\\"\"\n    pwshLongProg = \"\\\"$basedir/\" + prog + \"$exe\\\"\"\n    target = \"\\\"%dp0%\\\\\" + target + \"\\\"\"\n    shTarget = \"\\\"$basedir/\" + shTarget + \"\\\"\"\n  }\n\n  // SETLOCAL\n  // CALL :find_dp0\n  //\n  // SET _maybeQuote=\"\n  // IF EXIST \"%dp0%\\node.exe\" (\n  //   SET \"_prog=%dp0%\\node.exe\"\n  // ) ELSE (\n  //   SET \"_prog=node\"\n  //   SET _maybeQuote=\n  //   SET PATHEXT=%PATHEXT:;.JS;=;%\n  // )\n  //\n  // %_maybeQuote%%_prog%%_maybeQuote% \"%dp0%\\.\\node_modules\\npm\\bin\\npm-cli.js\" %*\n  // ENDLOCAL\n  // EXIT /b %errorlevel%\n  //\n  // :find_dp0\n  // SET dp0=%~dp0\n  // EXIT /b\n  //\n  // Subroutine trick to fix https://github.com/npm/cmd-shim/issues/10\n  var head = '@ECHO off\\r\\n' +\n    'SETLOCAL\\r\\n' +\n    'CALL :find_dp0\\r\\n'\n  var foot = 'ENDLOCAL\\r\\n' +\n    'EXIT /b %errorlevel%\\r\\n' +\n    ':find_dp0\\r\\n' +\n    'SET dp0=%~dp0\\r\\n' +\n    'EXIT /b\\r\\n'\n\n  var cmd\n  if (longProg) {\n    shLongProg = shLongProg.trim();\n    args = args.trim();\n    var variableDeclarationsAsBatch = toBatchSyntax.convertToSetCommands(variables)\n    cmd = head\n        + variableDeclarationsAsBatch\n        + \"\\r\\n\"\n\t+ \"SET _maybeQuote=\\\"\\r\\n\"\n        + \"IF EXIST \" + longProg + \" (\\r\\n\"\n        + \"  SET \\\"_prog=\" + longProg.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\"\n        + \") ELSE (\\r\\n\"\n\t+ \"  SET _maybeQuote=\\r\\n\"\n        + \"  SET \\\"_prog=\" + prog.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\"\n        + \"  SET PATHEXT=%PATHEXT:;.JS;=;%\\r\\n\"\n        + \")\\r\\n\"\n        + \"\\r\\n\"\n        +  \"%_maybeQuote%%_prog%%_maybeQuote% \" + args + \" \" + target + \" %*\\r\\n\"\n        + foot\n  } else {\n    cmd = head + prog + \" \" + args + \" \" + target + \" %*\\r\\n\" + foot\n  }\n\n  // #!/bin/sh\n  // basedir=`dirname \"$0\"`\n  //\n  // case `uname` in\n  //     *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \"$basedir\"`;;\n  // esac\n  //\n  // if [ -x \"$basedir/node.exe\" ]; then\n  //   \"$basedir/node.exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // else\n  //   node \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // fi\n  // exit $ret\n\n  var sh = \"#!/bin/sh\\n\"\n\n  sh = sh\n      + \"basedir=$(dirname \\\"$(echo \\\"$0\\\" | sed -e 's,\\\\\\\\,/,g')\\\")\\n\"\n      + \"\\n\"\n      + \"case `uname` in\\n\"\n      + \"    *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \\\"$basedir\\\"`;;\\n\"\n      + \"esac\\n\"\n      + \"\\n\"\n\n  if (shLongProg) {\n    sh = sh\n       + \"if [ -x \"+shLongProg+\" ]; then\\n\"\n       + \"  \" + variables + shLongProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\"\n       + \"  ret=$?\\n\"\n       + \"else \\n\"\n       + \"  \" + variables + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\"\n       + \"  ret=$?\\n\"\n       + \"fi\\n\"\n       + \"exit $ret\\n\"\n  } else {\n    sh = sh\n       + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\"\n       + \"exit $?\\n\"\n  }\n\n  // #!/usr/bin/env pwsh\n  // $basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\n  //\n  // $ret=0\n  // $exe = \"\"\n  // if ($PSVersionTable.PSVersion -lt \"6.0\" -or $IsWindows) {\n  //   # Fix case when both the Windows and Linux builds of Node\n  //   # are installed in the same directory\n  //   $exe = \".exe\"\n  // }\n  // if (Test-Path \"$basedir/node\") {\n  //   & \"$basedir/node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // } else {\n  //   & \"node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // }\n  // exit $ret\n  var pwsh = \"#!/usr/bin/env pwsh\\n\"\n           + \"$basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\\n\"\n           + \"\\n\"\n           + \"$exe=\\\"\\\"\\n\"\n           + \"if ($PSVersionTable.PSVersion -lt \\\"6.0\\\" -or $IsWindows) {\\n\"\n           + \"  # Fix case when both the Windows and Linux builds of Node\\n\"\n           + \"  # are installed in the same directory\\n\"\n           + \"  $exe=\\\".exe\\\"\\n\"\n           + \"}\\n\"\n  if (shLongProg) {\n    pwsh = pwsh\n         + \"$ret=0\\n\"\n         + \"if (Test-Path \" + pwshLongProg + \") {\\n\"\n         + \"  & \" + pwshLongProg + \" \" + args + \" \" + shTarget + \" $args\\n\"\n         + \"  $ret=$LASTEXITCODE\\n\"\n         + \"} else {\\n\"\n         + \"  & \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\"\n         + \"  $ret=$LASTEXITCODE\\n\"\n         + \"}\\n\"\n         + \"exit $ret\\n\"\n  } else {\n    pwsh = pwsh\n         + \"& \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\"\n         + \"exit $LASTEXITCODE\\n\"\n  }\n\n  var then = times(3, next, cb)\n  fs.writeFile(to + \".ps1\", pwsh, \"utf8\", then)\n  fs.writeFile(to + \".cmd\", cmd, \"utf8\", then)\n  fs.writeFile(to, sh, \"utf8\", then)\n  function next () {\n    chmodShim(to, cb)\n  }\n}\n\nfunction chmodShim (to, cb) {\n  var then = times(3, cb, cb)\n  fs.chmod(to, \"0755\", then)\n  fs.chmod(to + \".cmd\", \"0755\", then)\n  fs.chmod(to + \".ps1\", \"0755\", then)\n}\n\nfunction times(n, ok, cb) {\n  var errState = null\n  return function(er) {\n    if (!errState) {\n      if (er)\n        cb(errState = er)\n      else if (--n === 0)\n        ok()\n    }\n  }\n}\n","exports.replaceDollarWithPercentPair = replaceDollarWithPercentPair\r\nexports.convertToSetCommand = convertToSetCommand\r\nexports.convertToSetCommands = convertToSetCommands\r\n\r\nfunction convertToSetCommand(key, value) {\r\n    var line = \"\"\r\n    key = key || \"\"\r\n    key = key.trim()\r\n    value = value || \"\"\r\n    value = value.trim()\r\n    if(key && value && value.length > 0) {\r\n        line = \"@SET \" + key + \"=\" + replaceDollarWithPercentPair(value) + \"\\r\\n\"\r\n    }\r\n    return line\r\n}\r\n\r\nfunction extractVariableValuePairs(declarations) {\r\n    var pairs = {}\r\n    declarations.map(function(declaration) {\r\n        var split = declaration.split(\"=\")\r\n        pairs[split[0]]=split[1]\r\n    })\r\n    return pairs\r\n}\r\n\r\nfunction convertToSetCommands(variableString) {\r\n    var variableValuePairs = extractVariableValuePairs(variableString.split(\" \"))\r\n    var variableDeclarationsAsBatch = \"\"\r\n    Object.keys(variableValuePairs).forEach(function (key) {\r\n        variableDeclarationsAsBatch += convertToSetCommand(key, variableValuePairs[key])\r\n    })\r\n    return variableDeclarationsAsBatch\r\n}\r\n\r\nfunction replaceDollarWithPercentPair(value) {\r\n    var dollarExpressions = /\\$\\{?([^\\$@#\\?\\- \\t{}:]+)\\}?/g\r\n    var result = \"\"\r\n    var startIndex = 0\r\n    do {\r\n        var match = dollarExpressions.exec(value)\r\n        if(match) {\r\n            var betweenMatches = value.substring(startIndex, match.index) || \"\"\r\n            result +=  betweenMatches + \"%\" + match[1] + \"%\"\r\n            startIndex = dollarExpressions.lastIndex\r\n        }\r\n    } while (dollarExpressions.lastIndex > 0)\r\n    result += value.substr(startIndex)\r\n    return result\r\n}\r\n\r\n\r\n"]}