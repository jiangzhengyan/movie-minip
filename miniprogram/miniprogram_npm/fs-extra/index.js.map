{"version":3,"sources":["index.js","util\\assign.js","copy\\index.js","copy\\copy.js","copy\\ncp.js","util\\utimes.js","mkdirs\\index.js","mkdirs\\mkdirs.js","mkdirs\\mkdirs-sync.js","copy-sync\\index.js","copy-sync\\copy-sync.js","copy-sync\\copy-file-sync.js","remove\\index.js","json\\index.js","json\\jsonfile.js","json\\output-json-sync.js","json\\output-json.js","move\\index.js","streams\\index.js","streams\\create-output-stream.js","empty\\index.js","ensure\\index.js","ensure\\file.js","ensure\\link.js","ensure\\symlink.js","ensure\\symlink-paths.js","ensure\\symlink-type.js","output\\index.js","walk\\index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;AELA,ADGA,AFMA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,ACHA,AJYA,ACHA;AELA,ACHA,AJYA,ACHA;AELA,ACHA,AJYA,ACHA;AELA,ACHA,AJYA,ACHA,AIZA;AFOA,ACHA,AJYA,ACHA,AIZA;AFOA,ACHA,AJYA,ACHA,AIZA;AFOA,ACHA,AJYA,AMlBA,ADGA;AFOA,ACHA,AJYA,AMlBA,ADGA;AFOA,ACHA,AJYA,AMlBA,ADGA;AFOA,ACHA,AJYA,AMlBA,ACHA,AFMA;AFOA,ACHA,AJYA,AMlBA,ACHA,AFMA;AFOA,ACHA,AJYA,AMlBA,ACHA,AFMA;AFOA,ACHA,AJYA,AMlBA,AENA,ADGA,AFMA;AFOA,ACHA,AJYA,AMlBA,AENA,ADGA,AFMA;AFOA,ACHA,AJYA,AMlBA,AENA,ADGA,AFMA;AIXA,ANkBA,ACHA,AJYA,AMlBA,AENA,ADGA,AFMA;AIXA,ANkBA,ACHA,AJYA,AQxBA,ADGA,AFMA;AIXA,ANkBA,ACHA,AJYA,AQxBA,ADGA,AFMA;AKdA,ADGA,ANkBA,ACHA,AJYA,AQxBA,ADGA,AFMA;AKdA,APqBA,ACHA,AJYA,AQxBA,ADGA,AFMA;AKdA,APqBA,ACHA,AJYA,AQxBA,ADGA,AFMA;AMjBA,ADGA,APqBA,ACHA,AJYA,AQxBA,ADGA,AFMA;AMjBA,ADGA,APqBA,ACHA,AJYA,AQxBA,ADGA,AFMA;AMjBA,ADGA,APqBA,ACHA,AJYA,AQxBA,ADGA,AFMA;AMjBA,ADGA,APqBA,ACHA,AJYA,AQxBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AJYA,AQxBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AJYA,AQxBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ALeA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ALeA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ALeA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ACHA,ANkBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ACHA,ANkBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ACHA,ANkBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ACHA,ACHA,APqBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ACHA,ACHA,APqBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ACHA,ACHA,APqBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AS3BA,ACHA,ACHA,ACHA,ARwBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AU9BA,ACHA,ACHA,ARwBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AU9BA,ACHA,ACHA,ARwBA,ADGA,AKfA,APqBA;AMjBA,ADGA,APqBA,ACHA,AU9BA,ACHA,ACHA,ARwBA,ADGA,AU9BA,AZoCA;AMjBA,ADGA,APqBA,ACHA,AU9BA,ACHA,ACHA,ARwBA,ADGA,AU9BA,AZoCA;AMjBA,ADGA,APqBA,ACHA,AU9BA,ACHA,ACHA,ARwBA,ADGA,AU9BA,AZoCA;AMjBA,ADGA,ANkBA,AU9BA,ACHA,ACHA,ARwBA,ADGA,AU9BA,ACHA,AbuCA;AMjBA,ADGA,ANkBA,AU9BA,ACHA,ACHA,ARwBA,ADGA,AU9BA,ACHA,AbuCA;AMjBA,ADGA,ANkBA,AU9BA,ACHA,ACHA,ARwBA,ADGA,AU9BA,ACHA,AbuCA;AMjBA,ADGA,ANkBA,AWjCA,ACHA,ARwBA,ADGA,AU9BA,AENA,ADGA,AbuCA;AMjBA,ADGA,ANkBA,AWjCA,ACHA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AWjCA,ACHA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,ALeA,ACHA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,ALeA,ACHA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,AJYA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,ACHA,ALeA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,ACHA,ALeA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,ACHA,ALeA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,AENA,ADGA,ALeA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,AENA,ADGA,ALeA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,AENA,ADGA,ALeA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,AENA,ADGA,AENA,APqBA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,AENA,ADGA,AENA,APqBA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,AENA,ADGA,AENA,APqBA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AMjBA,ADGA,ANkBA,AgBhDA,AENA,ADGA,AENA,ACHA,ARwBA,ARwBA,ADGA,AU9BA,AENA,Ad0CA;AKdA,ANkBA,AgBhDA,AENA,ADGA,AENA,ACHA,AhBgDA,ADGA,AU9BA,AENA,Ad0CA;AKdA,ANkBA,AgBhDA,AENA,ADGA,AENA,ACHA,AjBmDA,AU9BA,AENA,Ad0CA;AKdA,ANkBA,AgBhDA,AENA,ADGA,AENA,AENA,ADGA,AjBmDA,AU9BA,AENA,Ad0CA;AKdA,ANkBA,AgBhDA,AENA,ADGA,AENA,AENA,ADGA,APqBA,AENA,Ad0CA;AKdA,ANkBA,AgBhDA,AENA,ADGA,AENA,AENA,ADGA,APqBA,AENA,Ad0CA;ADIA,AgBhDA,AENA,ADGA,AENA,AENA,ACHA,AFMA,APqBA,AENA,Ad0CA;ADIA,AgBhDA,AENA,ADGA,AENA,AENA,ACHA,AFMA,APqBA,AENA,Ad0CA;ADIA,AgBhDA,AENA,ADGA,AENA,AENA,ACHA,AFMA,APqBA,AENA,Ad0CA;ADIA,AgBhDA,AENA,ADGA,AENA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA,Ad0CA;ADIA,AgBhDA,AENA,ADGA,AENA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA,Ad0CA;ADIA,AgBhDA,AENA,ADGA,AENA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA,Ad0CA;ADIA,AgBhDA,AENA,ADGA,AENA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA,Ad0CA,AuBrEA;AxByEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA,AS3BA;AxByEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA,AS3BA;AxByEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA,AS3BA;AxByEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA,AS3BA;AxByEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA,AS3BA;AxByEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA,ARwBA;Af8CA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA;AvBsEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA;AvBsEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA;AvBsEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA;AvBsEA,AgBhDA,AENA,ACHA,AENA,ACHA,AFMA,APqBA,AU9BA;AvBsEA,AgBhDA,AENA,ACHA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AgBhDA,AENA,ACHA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AkBtDA,ACHA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AkBtDA,ACHA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AmBzDA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AmBzDA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AmBzDA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AmBzDA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AmBzDA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AmBzDA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AmBzDA,AENA,ADGA,APqBA,AU9BA;AvBsEA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AmBzDA,AENA,ADGA,APqBA;AbwCA,AqB/DA,ADGA,APqBA;AbwCA,AqB/DA,ADGA,APqBA;AbwCA,AqB/DA,ADGA,APqBA;AbwCA,AqB/DA,ADGA,APqBA;AbwCA,AqB/DA,ADGA,APqBA;AbwCA,AqB/DA,ADGA,APqBA;AbwCA,AqB/DA,ADGA,APqBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AqB/DA,ARwBA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA,AavCA;AbwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var assign = require('./util/assign')\n\nvar fse = {}\nvar gfs = require('graceful-fs')\n\n// attach fs methods to fse\nObject.keys(gfs).forEach(function (key) {\n  fse[key] = gfs[key]\n})\n\nvar fs = fse\n\nassign(fs, require('./copy'))\nassign(fs, require('./copy-sync'))\nassign(fs, require('./mkdirs'))\nassign(fs, require('./remove'))\nassign(fs, require('./json'))\nassign(fs, require('./move'))\nassign(fs, require('./streams'))\nassign(fs, require('./empty'))\nassign(fs, require('./ensure'))\nassign(fs, require('./output'))\nassign(fs, require('./walk'))\n\nmodule.exports = fs\n\n// maintain backwards compatibility for awhile\nvar jsonfile = {}\nObject.defineProperty(jsonfile, 'spaces', {\n  get: function () {\n    return fs.spaces // found in ./json\n  },\n  set: function (val) {\n    fs.spaces = val\n  }\n})\n\nmodule.exports.jsonfile = jsonfile // so users of fs-extra can modify jsonFile.spaces\n","// simple mutable assign\nfunction assign () {\n  var args = [].slice.call(arguments).filter(function (i) { return i })\n  var dest = args.shift()\n  args.forEach(function (src) {\n    Object.keys(src).forEach(function (key) {\n      dest[key] = src[key]\n    })\n  })\n\n  return dest\n}\n\nmodule.exports = assign\n","module.exports = {\n  copy: require('./copy')\n}\n","var fs = require('graceful-fs')\nvar path = require('path')\nvar ncp = require('./ncp')\nvar mkdir = require('../mkdirs')\n\nfunction copy (src, dest, options, callback) {\n  if (typeof options === 'function' && !callback) {\n    callback = options\n    options = {}\n  } else if (typeof options === 'function' || options instanceof RegExp) {\n    options = {filter: options}\n  }\n  callback = callback || function () {}\n  options = options || {}\n\n  // don't allow src and dest to be the same\n  var basePath = process.cwd()\n  var currentPath = path.resolve(basePath, src)\n  var targetPath = path.resolve(basePath, dest)\n  if (currentPath === targetPath) return callback(new Error('Source and destination must not be the same.'))\n\n  fs.lstat(src, function (err, stats) {\n    if (err) return callback(err)\n\n    var dir = null\n    if (stats.isDirectory()) {\n      var parts = dest.split(path.sep)\n      parts.pop()\n      dir = parts.join(path.sep)\n    } else {\n      dir = path.dirname(dest)\n    }\n\n    fs.exists(dir, function (dirExists) {\n      if (dirExists) return ncp(src, dest, options, callback)\n      mkdir.mkdirs(dir, function (err) {\n        if (err) return callback(err)\n        ncp(src, dest, options, callback)\n      })\n    })\n  })\n}\n\nmodule.exports = copy\n","// imported from ncp (this is temporary, will rewrite)\n\nvar fs = require('graceful-fs')\nvar path = require('path')\nvar utimes = require('../util/utimes')\n\nfunction ncp (source, dest, options, callback) {\n  if (!callback) {\n    callback = options\n    options = {}\n  }\n\n  var basePath = process.cwd()\n  var currentPath = path.resolve(basePath, source)\n  var targetPath = path.resolve(basePath, dest)\n\n  var filter = options.filter\n  var transform = options.transform\n  var clobber = options.clobber !== false\n  var dereference = options.dereference\n  var preserveTimestamps = options.preserveTimestamps === true\n\n  var errs = null\n\n  var started = 0\n  var finished = 0\n  var running = 0\n  // this is pretty useless now that we're using graceful-fs\n  // consider removing\n  var limit = options.limit || 512\n\n  startCopy(currentPath)\n\n  function startCopy (source) {\n    started++\n    if (filter) {\n      if (filter instanceof RegExp) {\n        if (!filter.test(source)) {\n          return doneOne(true)\n        }\n      } else if (typeof filter === 'function') {\n        if (!filter(source)) {\n          return doneOne(true)\n        }\n      }\n    }\n    return getStats(source)\n  }\n\n  function getStats (source) {\n    var stat = dereference ? fs.stat : fs.lstat\n    if (running >= limit) {\n      return setImmediate(function () {\n        getStats(source)\n      })\n    }\n    running++\n    stat(source, function (err, stats) {\n      if (err) return onError(err)\n\n      // We need to get the mode from the stats object and preserve it.\n      var item = {\n        name: source,\n        mode: stats.mode,\n        mtime: stats.mtime, // modified time\n        atime: stats.atime, // access time\n        stats: stats // temporary\n      }\n\n      if (stats.isDirectory()) {\n        return onDir(item)\n      } else if (stats.isFile() || stats.isCharacterDevice() || stats.isBlockDevice()) {\n        return onFile(item)\n      } else if (stats.isSymbolicLink()) {\n        // Symlinks don't really need to know about the mode.\n        return onLink(source)\n      }\n    })\n  }\n\n  function onFile (file) {\n    var target = file.name.replace(currentPath, targetPath)\n    isWritable(target, function (writable) {\n      if (writable) {\n        copyFile(file, target)\n      } else {\n        if (clobber) {\n          rmFile(target, function () {\n            copyFile(file, target)\n          })\n        } else {\n          doneOne()\n        }\n      }\n    })\n  }\n\n  function copyFile (file, target) {\n    var readStream = fs.createReadStream(file.name)\n    var writeStream = fs.createWriteStream(target, { mode: file.mode })\n\n    readStream.on('error', onError)\n    writeStream.on('error', onError)\n\n    if (transform) {\n      transform(readStream, writeStream, file)\n    } else {\n      writeStream.on('open', function () {\n        readStream.pipe(writeStream)\n      })\n    }\n\n    writeStream.once('finish', function () {\n      fs.chmod(target, file.mode, function (err) {\n        if (err) return onError(err)\n        if (preserveTimestamps) {\n          utimes.utimesMillis(target, file.atime, file.mtime, function (err) {\n            if (err) return onError(err)\n            return doneOne()\n          })\n        } else {\n          doneOne()\n        }\n      })\n    })\n  }\n\n  function rmFile (file, done) {\n    fs.unlink(file, function (err) {\n      if (err) return onError(err)\n      return done()\n    })\n  }\n\n  function onDir (dir) {\n    var target = dir.name.replace(currentPath, targetPath)\n    isWritable(target, function (writable) {\n      if (writable) {\n        return mkDir(dir, target)\n      }\n      copyDir(dir.name)\n    })\n  }\n\n  function mkDir (dir, target) {\n    fs.mkdir(target, dir.mode, function (err) {\n      if (err) return onError(err)\n      // despite setting mode in fs.mkdir, doesn't seem to work\n      // so we set it here.\n      fs.chmod(target, dir.mode, function (err) {\n        if (err) return onError(err)\n        copyDir(dir.name)\n      })\n    })\n  }\n\n  function copyDir (dir) {\n    fs.readdir(dir, function (err, items) {\n      if (err) return onError(err)\n      items.forEach(function (item) {\n        startCopy(path.join(dir, item))\n      })\n      return doneOne()\n    })\n  }\n\n  function onLink (link) {\n    var target = link.replace(currentPath, targetPath)\n    fs.readlink(link, function (err, resolvedPath) {\n      if (err) return onError(err)\n      checkLink(resolvedPath, target)\n    })\n  }\n\n  function checkLink (resolvedPath, target) {\n    if (dereference) {\n      resolvedPath = path.resolve(basePath, resolvedPath)\n    }\n    isWritable(target, function (writable) {\n      if (writable) {\n        return makeLink(resolvedPath, target)\n      }\n      fs.readlink(target, function (err, targetDest) {\n        if (err) return onError(err)\n\n        if (dereference) {\n          targetDest = path.resolve(basePath, targetDest)\n        }\n        if (targetDest === resolvedPath) {\n          return doneOne()\n        }\n        return rmFile(target, function () {\n          makeLink(resolvedPath, target)\n        })\n      })\n    })\n  }\n\n  function makeLink (linkPath, target) {\n    fs.symlink(linkPath, target, function (err) {\n      if (err) return onError(err)\n      return doneOne()\n    })\n  }\n\n  function isWritable (path, done) {\n    fs.lstat(path, function (err) {\n      if (err) {\n        if (err.code === 'ENOENT') return done(true)\n        return done(false)\n      }\n      return done(false)\n    })\n  }\n\n  function onError (err) {\n    if (options.stopOnError) {\n      return callback(err)\n    } else if (!errs && options.errs) {\n      errs = fs.createWriteStream(options.errs)\n    } else if (!errs) {\n      errs = []\n    }\n    if (typeof errs.write === 'undefined') {\n      errs.push(err)\n    } else {\n      errs.write(err.stack + '\\n\\n')\n    }\n    return doneOne()\n  }\n\n  function doneOne (skipped) {\n    if (!skipped) running--\n    finished++\n    if ((started === finished) && (running === 0)) {\n      if (callback !== undefined) {\n        return errs ? callback(errs) : callback(null)\n      }\n    }\n  }\n}\n\nmodule.exports = ncp\n","var fs = require('graceful-fs')\nvar path = require('path')\nvar os = require('os')\n\n// HFS, ext{2,3}, FAT do not, Node.js v0.10 does not\nfunction hasMillisResSync () {\n  var tmpfile = path.join('millis-test-sync' + Date.now().toString() + Math.random().toString().slice(2))\n  tmpfile = path.join(os.tmpdir(), tmpfile)\n\n  // 550 millis past UNIX epoch\n  var d = new Date(1435410243862)\n  fs.writeFileSync(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141')\n  var fd = fs.openSync(tmpfile, 'r+')\n  fs.futimesSync(fd, d, d)\n  fs.closeSync(fd)\n  return fs.statSync(tmpfile).mtime > 1435410243000\n}\n\nfunction hasMillisRes (callback) {\n  var tmpfile = path.join('millis-test' + Date.now().toString() + Math.random().toString().slice(2))\n  tmpfile = path.join(os.tmpdir(), tmpfile)\n\n  // 550 millis past UNIX epoch\n  var d = new Date(1435410243862)\n  fs.writeFile(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141', function (err) {\n    if (err) return callback(err)\n    fs.open(tmpfile, 'r+', function (err, fd) {\n      if (err) return callback(err)\n      fs.futimes(fd, d, d, function (err) {\n        if (err) return callback(err)\n        fs.close(fd, function (err) {\n          if (err) return callback(err)\n          fs.stat(tmpfile, function (err, stats) {\n            if (err) return callback(err)\n            callback(null, stats.mtime > 1435410243000)\n          })\n        })\n      })\n    })\n  })\n}\n\nfunction timeRemoveMillis (timestamp) {\n  if (typeof timestamp === 'number') {\n    return Math.floor(timestamp / 1000) * 1000\n  } else if (timestamp instanceof Date) {\n    return new Date(Math.floor(timestamp.getTime() / 1000) * 1000)\n  } else {\n    throw new Error('fs-extra: timeRemoveMillis() unknown parameter type')\n  }\n}\n\nfunction utimesMillis (path, atime, mtime, callback) {\n  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)\n  fs.open(path, 'r+', function (err, fd) {\n    if (err) return callback(err)\n    fs.futimes(fd, atime, mtime, function (err) {\n      if (err) return callback(err)\n      fs.close(fd, callback)\n    })\n  })\n}\n\nmodule.exports = {\n  hasMillisRes: hasMillisRes,\n  hasMillisResSync: hasMillisResSync,\n  timeRemoveMillis: timeRemoveMillis,\n  utimesMillis: utimesMillis\n}\n","module.exports = {\n  mkdirs: require('./mkdirs'),\n  mkdirsSync: require('./mkdirs-sync'),\n  // alias\n  mkdirp: require('./mkdirs'),\n  mkdirpSync: require('./mkdirs-sync'),\n  ensureDir: require('./mkdirs'),\n  ensureDirSync: require('./mkdirs-sync')\n}\n","var fs = require('graceful-fs')\nvar path = require('path')\n\nvar o777 = parseInt('0777', 8)\n\nfunction mkdirs (p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  } else if (!opts || typeof opts !== 'object') {\n    opts = { mode: opts }\n  }\n\n  var mode = opts.mode\n  var xfs = opts.fs || fs\n\n  if (mode === undefined) {\n    mode = o777 & (~process.umask())\n  }\n  if (!made) made = null\n\n  callback = callback || function () {}\n  p = path.resolve(p)\n\n  xfs.mkdir(p, mode, function (er) {\n    if (!er) {\n      made = made || p\n      return callback(null, made)\n    }\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er)\n        mkdirs(path.dirname(p), opts, function (er, made) {\n          if (er) callback(er, made)\n          else mkdirs(p, opts, callback, made)\n        })\n        break\n\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n      default:\n        xfs.stat(p, function (er2, stat) {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) callback(er, made)\n          else callback(null, made)\n        })\n        break\n    }\n  })\n}\n\nmodule.exports = mkdirs\n","var fs = require('graceful-fs')\nvar path = require('path')\n\nvar o777 = parseInt('0777', 8)\n\nfunction mkdirsSync (p, opts, made) {\n  if (!opts || typeof opts !== 'object') {\n    opts = { mode: opts }\n  }\n\n  var mode = opts.mode\n  var xfs = opts.fs || fs\n\n  if (mode === undefined) {\n    mode = o777 & (~process.umask())\n  }\n  if (!made) made = null\n\n  p = path.resolve(p)\n\n  try {\n    xfs.mkdirSync(p, mode)\n    made = made || p\n  } catch (err0) {\n    switch (err0.code) {\n      case 'ENOENT' :\n        made = mkdirsSync(path.dirname(p), opts, made)\n        mkdirsSync(p, opts, made)\n        break\n\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n      default:\n        var stat\n        try {\n          stat = xfs.statSync(p)\n        } catch (err1) {\n          throw err0\n        }\n        if (!stat.isDirectory()) throw err0\n        break\n    }\n  }\n\n  return made\n}\n\nmodule.exports = mkdirsSync\n","module.exports = {\n  copySync: require('./copy-sync')\n}\n","var fs = require('graceful-fs')\nvar path = require('path')\nvar copyFileSync = require('./copy-file-sync')\nvar mkdir = require('../mkdirs')\n\nfunction copySync (src, dest, options) {\n  if (typeof options === 'function' || options instanceof RegExp) {\n    options = {filter: options}\n  }\n\n  options = options || {}\n  options.recursive = !!options.recursive\n\n  // default to true for now\n  options.clobber = 'clobber' in options ? !!options.clobber : true\n  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false\n\n  options.filter = options.filter || function () { return true }\n\n  var stats = options.recursive ? fs.lstatSync(src) : fs.statSync(src)\n  var destFolder = path.dirname(dest)\n  var destFolderExists = fs.existsSync(destFolder)\n  var performCopy = false\n\n  if (stats.isFile()) {\n    if (options.filter instanceof RegExp) performCopy = options.filter.test(src)\n    else if (typeof options.filter === 'function') performCopy = options.filter(src)\n\n    if (performCopy) {\n      if (!destFolderExists) mkdir.mkdirsSync(destFolder)\n      copyFileSync(src, dest, {clobber: options.clobber, preserveTimestamps: options.preserveTimestamps})\n    }\n  } else if (stats.isDirectory()) {\n    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest)\n    var contents = fs.readdirSync(src)\n    contents.forEach(function (content) {\n      var opts = options\n      opts.recursive = true\n      copySync(path.join(src, content), path.join(dest, content), opts)\n    })\n  } else if (options.recursive && stats.isSymbolicLink()) {\n    var srcPath = fs.readlinkSync(src)\n    fs.symlinkSync(srcPath, dest)\n  }\n}\n\nmodule.exports = copySync\n","var fs = require('graceful-fs')\n\nvar BUF_LENGTH = 64 * 1024\nvar _buff = new Buffer(BUF_LENGTH)\n\nfunction copyFileSync (srcFile, destFile, options) {\n  var clobber = options.clobber\n  var preserveTimestamps = options.preserveTimestamps\n\n  if (fs.existsSync(destFile)) {\n    if (clobber) {\n      fs.chmodSync(destFile, parseInt('777', 8))\n      fs.unlinkSync(destFile)\n    } else {\n      throw Error('EEXIST')\n    }\n  }\n\n  var fdr = fs.openSync(srcFile, 'r')\n  var stat = fs.fstatSync(fdr)\n  var fdw = fs.openSync(destFile, 'w', stat.mode)\n  var bytesRead = 1\n  var pos = 0\n\n  while (bytesRead > 0) {\n    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)\n    fs.writeSync(fdw, _buff, 0, bytesRead)\n    pos += bytesRead\n  }\n\n  if (preserveTimestamps) {\n    fs.futimesSync(fdw, stat.atime, stat.mtime)\n  }\n\n  fs.closeSync(fdr)\n  fs.closeSync(fdw)\n}\n\nmodule.exports = copyFileSync\n","var rimraf = require('rimraf')\n\nfunction removeSync (dir) {\n  return rimraf.sync(dir)\n}\n\nfunction remove (dir, callback) {\n  return callback ? rimraf(dir, callback) : rimraf(dir, function () {})\n}\n\nmodule.exports = {\n  remove: remove,\n  removeSync: removeSync\n}\n","var jsonFile = require('./jsonfile')\n\njsonFile.outputJsonSync = require('./output-json-sync')\njsonFile.outputJson = require('./output-json')\n// aliases\njsonFile.outputJSONSync = require('./output-json-sync')\njsonFile.outputJSON = require('./output-json')\n\nmodule.exports = jsonFile\n","var jsonFile = require('jsonfile')\n\nmodule.exports = {\n  // jsonfile exports\n  readJson: jsonFile.readFile,\n  readJSON: jsonFile.readFile,\n  readJsonSync: jsonFile.readFileSync,\n  readJSONSync: jsonFile.readFileSync,\n  writeJson: jsonFile.writeFile,\n  writeJSON: jsonFile.writeFile,\n  writeJsonSync: jsonFile.writeFileSync,\n  writeJSONSync: jsonFile.writeFileSync,\n  spaces: 2 // default in fs-extra\n}\n","var fs = require('graceful-fs')\nvar path = require('path')\nvar jsonFile = require('./jsonfile')\nvar mkdir = require('../mkdirs')\n\nfunction outputJsonSync (file, data, options) {\n  var dir = path.dirname(file)\n\n  if (!fs.existsSync(dir)) {\n    mkdir.mkdirsSync(dir)\n  }\n\n  jsonFile.writeJsonSync(file, data, options)\n}\n\nmodule.exports = outputJsonSync\n","var fs = require('graceful-fs')\nvar path = require('path')\nvar jsonFile = require('./jsonfile')\nvar mkdir = require('../mkdirs')\n\nfunction outputJson (file, data, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n    options = {}\n  }\n\n  var dir = path.dirname(file)\n\n  fs.exists(dir, function (itDoes) {\n    if (itDoes) return jsonFile.writeJson(file, data, options, callback)\n\n    mkdir.mkdirs(dir, function (err) {\n      if (err) return callback(err)\n      jsonFile.writeJson(file, data, options, callback)\n    })\n  })\n}\n\nmodule.exports = outputJson\n","// most of this code was written by Andrew Kelley\n// licensed under the BSD license: see\n// https://github.com/andrewrk/node-mv/blob/master/package.json\n\n// this needs a cleanup\n\nvar fs = require('graceful-fs')\nvar ncp = require('../copy/ncp')\nvar path = require('path')\nvar rimraf = require('rimraf')\nvar mkdirp = require('../mkdirs').mkdirs\n\nfunction mv (source, dest, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n    options = {}\n  }\n\n  var shouldMkdirp = ('mkdirp' in options) ? options.mkdirp : true\n  var clobber = ('clobber' in options) ? options.clobber : false\n\n  var limit = options.limit || 16\n\n  if (shouldMkdirp) {\n    mkdirs()\n  } else {\n    doRename()\n  }\n\n  function mkdirs () {\n    mkdirp(path.dirname(dest), function (err) {\n      if (err) return callback(err)\n      doRename()\n    })\n  }\n\n  function doRename () {\n    if (clobber) {\n      fs.rename(source, dest, function (err) {\n        if (!err) return callback()\n\n        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {\n          rimraf(dest, function (err) {\n            if (err) return callback(err)\n            options.clobber = false // just clobbered it, no need to do it again\n            mv(source, dest, options, callback)\n          })\n          return\n        }\n\n        // weird Windows shit\n        if (err.code === 'EPERM') {\n          setTimeout(function () {\n            rimraf(dest, function (err) {\n              if (err) return callback(err)\n              options.clobber = false\n              mv(source, dest, options, callback)\n            })\n          }, 200)\n          return\n        }\n\n        if (err.code !== 'EXDEV') return callback(err)\n        moveAcrossDevice(source, dest, clobber, limit, callback)\n      })\n    } else {\n      fs.link(source, dest, function (err) {\n        if (err) {\n          if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM') {\n            moveAcrossDevice(source, dest, clobber, limit, callback)\n            return\n          }\n          callback(err)\n          return\n        }\n        fs.unlink(source, callback)\n      })\n    }\n  }\n}\n\nfunction moveAcrossDevice (source, dest, clobber, limit, callback) {\n  fs.stat(source, function (err, stat) {\n    if (err) {\n      callback(err)\n      return\n    }\n\n    if (stat.isDirectory()) {\n      moveDirAcrossDevice(source, dest, clobber, limit, callback)\n    } else {\n      moveFileAcrossDevice(source, dest, clobber, limit, callback)\n    }\n  })\n}\n\nfunction moveFileAcrossDevice (source, dest, clobber, limit, callback) {\n  var outFlags = clobber ? 'w' : 'wx'\n  var ins = fs.createReadStream(source)\n  var outs = fs.createWriteStream(dest, {flags: outFlags})\n\n  ins.on('error', function (err) {\n    ins.destroy()\n    outs.destroy()\n    outs.removeListener('close', onClose)\n\n    // may want to create a directory but `out` line above\n    // creates an empty file for us: See #108\n    // don't care about error here\n    fs.unlink(dest, function () {\n      // note: `err` here is from the input stream errror\n      if (err.code === 'EISDIR' || err.code === 'EPERM') {\n        moveDirAcrossDevice(source, dest, clobber, limit, callback)\n      } else {\n        callback(err)\n      }\n    })\n  })\n\n  outs.on('error', function (err) {\n    ins.destroy()\n    outs.destroy()\n    outs.removeListener('close', onClose)\n    callback(err)\n  })\n\n  outs.once('close', onClose)\n  ins.pipe(outs)\n\n  function onClose () {\n    fs.unlink(source, callback)\n  }\n}\n\nfunction moveDirAcrossDevice (source, dest, clobber, limit, callback) {\n  var options = {\n    stopOnErr: true,\n    clobber: false,\n    limit: limit\n  }\n\n  function startNcp () {\n    ncp(source, dest, options, function (errList) {\n      if (errList) return callback(errList[0])\n      rimraf(source, callback)\n    })\n  }\n\n  if (clobber) {\n    rimraf(dest, function (err) {\n      if (err) return callback(err)\n      startNcp()\n    })\n  } else {\n    startNcp()\n  }\n}\n\nmodule.exports = {\n  move: mv\n}\n","module.exports = {\n  createOutputStream: require('./create-output-stream')\n}\n","var path = require('path')\nvar fs = require('fs')\nvar mkdir = require('../mkdirs')\nvar WriteStream = fs.WriteStream\n\nfunction createOutputStream (file, options) {\n  var dirExists = false\n  var dir = path.dirname(file)\n  options = options || {}\n\n  // if fd is set with an actual number, file is created, hence directory is too\n  if (options.fd) {\n    return fs.createWriteStream(file, options)\n  } else {\n    // this hacks the WriteStream constructor from calling open()\n    options.fd = -1\n  }\n\n  var ws = new WriteStream(file, options)\n\n  var oldOpen = ws.open\n  ws.open = function () {\n    ws.fd = null // set actual fd\n    if (dirExists) return oldOpen.call(ws)\n\n    // this only runs once on first write\n    mkdir.mkdirs(dir, function (err) {\n      if (err) {\n        ws.destroy()\n        ws.emit('error', err)\n        return\n      }\n      dirExists = true\n      oldOpen.call(ws)\n    })\n  }\n\n  ws.open()\n\n  return ws\n}\n\nmodule.exports = createOutputStream\n","var fs = require('fs')\nvar path = require('path')\nvar mkdir = require('../mkdirs')\nvar remove = require('../remove')\n\nfunction emptyDir (dir, callback) {\n  callback = callback || function () {}\n  fs.readdir(dir, function (err, items) {\n    if (err) return mkdir.mkdirs(dir, callback)\n\n    items = items.map(function (item) {\n      return path.join(dir, item)\n    })\n\n    deleteItem()\n\n    function deleteItem () {\n      var item = items.pop()\n      if (!item) return callback()\n      remove.remove(item, function (err) {\n        if (err) return callback(err)\n        deleteItem()\n      })\n    }\n  })\n}\n\nfunction emptyDirSync (dir) {\n  var items\n  try {\n    items = fs.readdirSync(dir)\n  } catch (err) {\n    return mkdir.mkdirsSync(dir)\n  }\n\n  items.forEach(function (item) {\n    item = path.join(dir, item)\n    remove.removeSync(item)\n  })\n}\n\nmodule.exports = {\n  emptyDirSync: emptyDirSync,\n  emptydirSync: emptyDirSync,\n  emptyDir: emptyDir,\n  emptydir: emptyDir\n}\n","var file = require('./file')\nvar link = require('./link')\nvar symlink = require('./symlink')\n\nmodule.exports = {\n  // file\n  createFile: file.createFile,\n  createFileSync: file.createFileSync,\n  ensureFile: file.createFile,\n  ensureFileSync: file.createFileSync,\n  // link\n  createLink: link.createLink,\n  createLinkSync: link.createLinkSync,\n  ensureLink: link.createLink,\n  ensureLinkSync: link.createLinkSync,\n  // symlink\n  createSymlink: symlink.createSymlink,\n  createSymlinkSync: symlink.createSymlinkSync,\n  ensureSymlink: symlink.createSymlink,\n  ensureSymlinkSync: symlink.createSymlinkSync\n}\n","var path = require('path')\nvar fs = require('graceful-fs')\nvar mkdir = require('../mkdirs')\n\nfunction createFile (file, callback) {\n  function makeFile () {\n    fs.writeFile(file, '', function (err) {\n      if (err) return callback(err)\n      callback()\n    })\n  }\n\n  fs.exists(file, function (fileExists) {\n    if (fileExists) return callback()\n    var dir = path.dirname(file)\n    fs.exists(dir, function (dirExists) {\n      if (dirExists) return makeFile()\n      mkdir.mkdirs(dir, function (err) {\n        if (err) return callback(err)\n        makeFile()\n      })\n    })\n  })\n}\n\nfunction createFileSync (file) {\n  if (fs.existsSync(file)) return\n\n  var dir = path.dirname(file)\n  if (!fs.existsSync(dir)) {\n    mkdir.mkdirsSync(dir)\n  }\n\n  fs.writeFileSync(file, '')\n}\n\nmodule.exports = {\n  createFile: createFile,\n  createFileSync: createFileSync,\n  // alias\n  ensureFile: createFile,\n  ensureFileSync: createFileSync\n}\n","var path = require('path')\nvar fs = require('graceful-fs')\nvar mkdir = require('../mkdirs')\n\nfunction createLink (srcpath, dstpath, callback) {\n  function makeLink (srcpath, dstpath) {\n    fs.link(srcpath, dstpath, function (err) {\n      if (err) return callback(err)\n      callback(null)\n    })\n  }\n\n  fs.exists(dstpath, function (destinationExists) {\n    if (destinationExists) return callback(null)\n    fs.lstat(srcpath, function (err, stat) {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureLink')\n        return callback(err)\n      }\n\n      var dir = path.dirname(dstpath)\n      fs.exists(dir, function (dirExists) {\n        if (dirExists) return makeLink(srcpath, dstpath)\n        mkdir.mkdirs(dir, function (err) {\n          if (err) return callback(err)\n          makeLink(srcpath, dstpath)\n        })\n      })\n    })\n  })\n}\n\nfunction createLinkSync (srcpath, dstpath, callback) {\n  var destinationExists = fs.existsSync(dstpath)\n  if (destinationExists) return undefined\n\n  try {\n    fs.lstatSync(srcpath)\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink')\n    throw err\n  }\n\n  var dir = path.dirname(dstpath)\n  var dirExists = fs.existsSync(dir)\n  if (dirExists) return fs.linkSync(srcpath, dstpath)\n  mkdir.mkdirsSync(dir)\n\n  return fs.linkSync(srcpath, dstpath)\n}\n\nmodule.exports = {\n  createLink: createLink,\n  createLinkSync: createLinkSync,\n  // alias\n  ensureLink: createLink,\n  ensureLinkSync: createLinkSync\n}\n","var path = require('path')\nvar fs = require('graceful-fs')\nvar _mkdirs = require('../mkdirs')\nvar mkdirs = _mkdirs.mkdirs\nvar mkdirsSync = _mkdirs.mkdirsSync\n\nvar _symlinkPaths = require('./symlink-paths')\nvar symlinkPaths = _symlinkPaths.symlinkPaths\nvar symlinkPathsSync = _symlinkPaths.symlinkPathsSync\n\nvar _symlinkType = require('./symlink-type')\nvar symlinkType = _symlinkType.symlinkType\nvar symlinkTypeSync = _symlinkType.symlinkTypeSync\n\nfunction createSymlink (srcpath, dstpath, type, callback) {\n  callback = (typeof type === 'function') ? type : callback\n  type = (typeof type === 'function') ? false : type\n\n  fs.exists(dstpath, function (destinationExists) {\n    if (destinationExists) return callback(null)\n    symlinkPaths(srcpath, dstpath, function (err, relative) {\n      if (err) return callback(err)\n      srcpath = relative.toDst\n      symlinkType(relative.toCwd, type, function (err, type) {\n        if (err) return callback(err)\n        var dir = path.dirname(dstpath)\n        fs.exists(dir, function (dirExists) {\n          if (dirExists) return fs.symlink(srcpath, dstpath, type, callback)\n          mkdirs(dir, function (err) {\n            if (err) return callback(err)\n            fs.symlink(srcpath, dstpath, type, callback)\n          })\n        })\n      })\n    })\n  })\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type, callback) {\n  callback = (typeof type === 'function') ? type : callback\n  type = (typeof type === 'function') ? false : type\n\n  var destinationExists = fs.existsSync(dstpath)\n  if (destinationExists) return undefined\n\n  var relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  var dir = path.dirname(dstpath)\n  var exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: createSymlink,\n  createSymlinkSync: createSymlinkSync,\n  // alias\n  ensureSymlink: createSymlink,\n  ensureSymlinkSync: createSymlinkSync\n}\n","var path = require('path')\n// path.isAbsolute shim for Node.js 0.10 support\npath.isAbsolute = (path.isAbsolute) ? path.isAbsolute : require('path-is-absolute')\nvar fs = require('graceful-fs')\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nfunction symlinkPaths (srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, function (err, stat) {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink')\n        return callback(err)\n      }\n      return callback(null, {\n        'toCwd': srcpath,\n        'toDst': srcpath\n      })\n    })\n  } else {\n    var dstdir = path.dirname(dstpath)\n    var relativeToDst = path.join(dstdir, srcpath)\n    return fs.exists(relativeToDst, function (exists) {\n      if (exists) {\n        return callback(null, {\n          'toCwd': relativeToDst,\n          'toDst': srcpath\n        })\n      } else {\n        return fs.lstat(srcpath, function (err, stat) {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink')\n            return callback(err)\n          }\n          return callback(null, {\n            'toCwd': srcpath,\n            'toDst': path.relative(dstdir, srcpath)\n          })\n        })\n      }\n    })\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  var exists\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      'toCwd': srcpath,\n      'toDst': srcpath\n    }\n  } else {\n    var dstdir = path.dirname(dstpath)\n    var relativeToDst = path.join(dstdir, srcpath)\n    exists = fs.existsSync(relativeToDst)\n    if (exists) {\n      return {\n        'toCwd': relativeToDst,\n        'toDst': srcpath\n      }\n    } else {\n      exists = fs.existsSync(srcpath)\n      if (!exists) throw new Error('relative srcpath does not exist')\n      return {\n        'toCwd': srcpath,\n        'toDst': path.relative(dstdir, srcpath)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  'symlinkPaths': symlinkPaths,\n  'symlinkPathsSync': symlinkPathsSync\n}\n","var fs = require('graceful-fs')\n\nfunction symlinkType (srcpath, type, callback) {\n  callback = (typeof type === 'function') ? type : callback\n  type = (typeof type === 'function') ? false : type\n  if (type) return callback(null, type)\n  fs.lstat(srcpath, function (err, stats) {\n    if (err) return callback(null, 'file')\n    type = (stats && stats.isDirectory()) ? 'dir' : 'file'\n    callback(null, type)\n  })\n}\n\nfunction symlinkTypeSync (srcpath, type) {\n  if (type) return type\n  try {\n    var stats = fs.lstatSync(srcpath)\n  } catch (e) {\n    return 'file'\n  }\n  return (stats && stats.isDirectory()) ? 'dir' : 'file'\n}\n\nmodule.exports = {\n  symlinkType: symlinkType,\n  symlinkTypeSync: symlinkTypeSync\n}\n","var path = require('path')\nvar fs = require('graceful-fs')\nvar mkdir = require('../mkdirs')\n\nfunction outputFile (file, data, encoding, callback) {\n  if (typeof encoding === 'function') {\n    callback = encoding\n    encoding = 'utf8'\n  }\n\n  var dir = path.dirname(file)\n  fs.exists(dir, function (itDoes) {\n    if (itDoes) return fs.writeFile(file, data, encoding, callback)\n\n    mkdir.mkdirs(dir, function (err) {\n      if (err) return callback(err)\n\n      fs.writeFile(file, data, encoding, callback)\n    })\n  })\n}\n\nfunction outputFileSync (file, data, encoding) {\n  var dir = path.dirname(file)\n  if (fs.existsSync(dir)) {\n    return fs.writeFileSync.apply(fs, arguments)\n  }\n  mkdir.mkdirsSync(dir)\n  fs.writeFileSync.apply(fs, arguments)\n}\n\nmodule.exports = {\n  outputFile: outputFile,\n  outputFileSync: outputFileSync\n}\n","var klaw = require('klaw')\n\nmodule.exports = {\n  walk: klaw\n}\n"]}