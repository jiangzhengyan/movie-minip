{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n/**\n * Expose `read`.\n */\n\nmodule.exports = read;\n\n/**\n * Read from a readable `stream`.\n *\n * @param {Stream} stream\n * @return {Function}\n */\n\nfunction read(stream) {\n  return typeof stream.read == 'function'\n    ? read2(stream)\n    : read1(stream);\n}\n\n/**\n * Read from a readable streams1 `stream`.\n *\n * @param {Stream} stream\n * @return {Function}\n */\n\nfunction* read1(stream) {\n  var err;\n  var data;\n\n  stream.on('data', ondata);\n  stream.on('error', onerror);\n  stream.resume();\n\n  function ondata(_data) {\n    stream.pause();\n    data = _data;\n  }\n\n  function onerror(_err) {\n    err = _err;\n  }\n\n  yield function (done) {\n    if (err || data || !stream.readable) return done();\n\n    stream.on('data', onevent);\n    stream.on('end', onevent);\n    stream.on('error', onevent);\n\n    function onevent() {\n      stream.removeListener('data', onevent);\n      stream.removeListener('end', onevent);\n      stream.removeListener('error', onevent);\n      done();\n    }\n  };\n\n  stream.removeListener('data', ondata);\n  stream.removeListener('error', onerror);\n\n  if (err) throw err;\n  return data;\n}\n\n/**\n * Read from a readable streams2 `stream`.\n *\n * @param {Stream} stream\n * @return {Function}\n */\n\nfunction read2(stream) {\n  return function(done) {\n    if (!stream.readable) {\n      return done();\n    }\n\n    function onreadable() {\n      cleanup();\n      check();\n    }\n\n    function onend() {\n      cleanup();\n      done(null, null);\n    }\n\n    function onerror(err) {\n      cleanup();\n      done(err);\n    }\n\n    function listen() {\n      stream.on('readable', onreadable);\n      stream.on('end', onend);\n      stream.on('error', onerror);\n    }\n\n    function cleanup() {\n      stream.removeListener('readable', onreadable);\n      stream.removeListener('end', onend);\n      stream.removeListener('error', onerror);\n    }\n\n    function check() {\n      var buf = stream.read();\n      if (buf) {\n        done(null, buf);\n      } else {\n        listen();\n      }\n    }\n\n    check();\n  };\n}\n"]}