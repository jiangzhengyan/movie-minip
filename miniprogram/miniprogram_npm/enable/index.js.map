{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/**!\n * enable - index.js\n *\n * Copyright(c) 2014 fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n *   dead_horse <dead_horse@qq.com> (http://github.com/dead-horse)\n *   hemanth.hm <hemanth.hm@gmail.com> (http://h3manth.com)\n */\n\n\n\n/**\n* Helper functions.\n*/\n\nfunction isFunction(attr) {\n  return typeof attr === 'function';\n}\n\nfunction isNumber(attr) {\n  return typeof attr === 'number';\n}\n\n/**\n * Module dependencies.\n */\n\n// generator\n\ntry {\n  eval('(function* () {})()');\n  exports.generator = true;\n} catch (_) {\n  exports.generator = false;\n}\n\n// let\n\ntry {\n  eval('let a = 1;');\n  exports.let = true;\n} catch (_) {\n  exports.let = false;\n}\n\n// const\ntry {\n  eval('(function () { const fubar = 42; return typeof fubar === \"number\"; }())');\n  exports.const = true;\n} catch (_) {\n  exports.const = false;\n}\n\n// Object.{is,assign,getOwnPropertySymbols,setPrototypeOf}\nexports.Object = {\n  is: isFunction(Object.is),\n  assign: isFunction(Object.assign),\n  getOwnPropertySymbols: isFunction(Object.getOwnPropertySymbols),\n  setPrototypeOf: isFunction(Object.setPrototypeOf)\n};\n\n// String methods.\nexports.String = {\n  raw: isFunction(String.raw),\n  fromCodePoint: isFunction(String.fromCodePoint),\n  prototype:{\n    codePointAt: isFunction(String.prototype.codePointAt),\n    normalize: isFunction(String.prototype.normalize),\n    repeat: isFunction(String.prototype.repeat),\n    startsWith: isFunction(String.prototype.startsWith),\n    endsWith: isFunction(String.prototype.endsWith),\n    contains: isFunction(String.prototype.contains)\n  }\n};\n\nexports.Number = {\n  isFinite: isFunction(Number.isFinite),\n  isInteger: isFunction(Number.isInteger),\t\n  isSafeInteger: isFunction(Number.isSafeInteger),\n  isNaN: isFunction(Number.isNaN),\n  EPSILON: isNumber(Number.EPSILON),\n  MIN_SAFE_INTEGER: isNumber(Number.MIN_SAFE_INTEGER),\n  MAX_SAFE_INTEGER: isNumber(Number.MAX_SAFE_INTEGER)\n};\n\nexports.Math = {\n  clz32: isFunction(Math.clz32),\n  imul: isFunction(Math.imul),\n  sign: isFunction(Math.sign),\n  log10: isFunction(Math.log10),\n  log2: isFunction(Math.log2),\n  log1p: isFunction(Math.log1p),\n  expm1: isFunction(Math.expm1),\n  cosh: isFunction(Math.cosh),\n  sinh: isFunction(Math.sinh),\n  tanh: isFunction(Math.tanh),\t\n  acosh: isFunction(Math.acosh),\t\n  asinh: isFunction(Math.asinh),\t\n  atanh: isFunction(Math.atanh),\n  hypot: isFunction(Math.hypot),\t\n  trunc: isFunction(Math.trunc),\t\n  fround: isFunction(Math.fround),\t\n  cbrt: isFunction(Math.cbrt)\n}"]}